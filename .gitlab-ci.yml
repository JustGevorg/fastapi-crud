variables:
  POSTGRES_DATABASE: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTRGES_HOST_AUTH_METHOD: trust
  POSTRGES_HOST: postgres

stages:
  - build
  - linting
  - testing

build:
  image: python:3.11
  stage: build 
  script:
    - python3 -m venv env
    - source env/bin/activate
    - export PYTHONPATH=$(pwd)
    - pip install -r requirements.txt
    - echo "Build success"
  artifacts:
    paths:
      - env

linting:
  stage: linting
  image: python:3.11
  script:
    - source env/bin/activate
    - echo "Linting code"
    - ruff check .
    - echo "Linting success"


testing:
  stage: testing
  image: python:3.11
  services:
    - name: postgres:15-alpine
      alias: postgres
  variables:
    PGHOST: postgres
    POSTGRES_DB_USER: postgres
    PGUSER: $POSTGRES_DB_USER
    PGDATABASE: $POSTGRES_DATABASE
    PGPASSWORD: $POSTGRES_PASSWORD
  script:
    - apt update
    - apt install postgresql-client -y
    - psql -h "postgres" -U "$PGUSER" -w -c "CREATE USER runner WITH PASSWORD 'postgres' CREATEDB;"
    - psql -h "postgres" -U "runner" -W "postgres" -c "CREATE DATABASE test_books_club;"
    - source env/bin/activate
    - export PYTHONPATH=$(pwd)
    - export TEST_DB_USER=runner
    - export TEST_DB_USER_PASSWORD=postgres
    - export TEST_DB_SERVER=postgres
    - export TEST_DB_NAME=test_books_club
    - pytest --cov --cov-report term --cov-report xml:coverage.xml
    - echo "Testing success"
    - echo PGHOST
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml